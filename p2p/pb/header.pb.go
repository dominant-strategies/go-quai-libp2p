// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: p2p/pb/header.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentHash    [][]byte `protobuf:"bytes,1,rep,name=parentHash,proto3" json:"parentHash,omitempty"`
	UncleHash     []byte   `protobuf:"bytes,2,opt,name=uncleHash,proto3" json:"uncleHash,omitempty"`
	Coinbase      []byte   `protobuf:"bytes,3,opt,name=coinbase,proto3" json:"coinbase,omitempty"`
	Root          []byte   `protobuf:"bytes,4,opt,name=root,proto3" json:"root,omitempty"`
	TxHash        []byte   `protobuf:"bytes,5,opt,name=txHash,proto3" json:"txHash,omitempty"`
	EtxHash       []byte   `protobuf:"bytes,6,opt,name=etxHash,proto3" json:"etxHash,omitempty"`
	EtxRollupHash []byte   `protobuf:"bytes,7,opt,name=etxRollupHash,proto3" json:"etxRollupHash,omitempty"`
	ManifestHash  [][]byte `protobuf:"bytes,8,rep,name=manifestHash,proto3" json:"manifestHash,omitempty"`
	ReceiptHash   []byte   `protobuf:"bytes,9,opt,name=receiptHash,proto3" json:"receiptHash,omitempty"`
	Difficulty    []byte   `protobuf:"bytes,10,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	ParentEntropy [][]byte `protobuf:"bytes,11,rep,name=parentEntropy,proto3" json:"parentEntropy,omitempty"`
	ParentDeltaS  [][]byte `protobuf:"bytes,12,rep,name=parentDeltaS,proto3" json:"parentDeltaS,omitempty"`
	Number        [][]byte `protobuf:"bytes,13,rep,name=number,proto3" json:"number,omitempty"`
	GasLimit      uint64   `protobuf:"varint,14,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	GasUsed       uint64   `protobuf:"varint,15,opt,name=gasUsed,proto3" json:"gasUsed,omitempty"`
	BaseFee       []byte   `protobuf:"bytes,16,opt,name=baseFee,proto3" json:"baseFee,omitempty"`
	Location      []byte   `protobuf:"bytes,17,opt,name=location,proto3" json:"location,omitempty"`
	Time          uint64   `protobuf:"varint,18,opt,name=time,proto3" json:"time,omitempty"`
	Extra         []byte   `protobuf:"bytes,19,opt,name=extra,proto3" json:"extra,omitempty"`
	MixHash       []byte   `protobuf:"bytes,20,opt,name=mixHash,proto3" json:"mixHash,omitempty"`
	Nonce         []byte   `protobuf:"bytes,21,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_p2p_pb_header_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_p2p_pb_header_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_p2p_pb_header_proto_rawDescGZIP(), []int{0}
}

func (x *Header) GetParentHash() [][]byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

func (x *Header) GetUncleHash() []byte {
	if x != nil {
		return x.UncleHash
	}
	return nil
}

func (x *Header) GetCoinbase() []byte {
	if x != nil {
		return x.Coinbase
	}
	return nil
}

func (x *Header) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *Header) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Header) GetEtxHash() []byte {
	if x != nil {
		return x.EtxHash
	}
	return nil
}

func (x *Header) GetEtxRollupHash() []byte {
	if x != nil {
		return x.EtxRollupHash
	}
	return nil
}

func (x *Header) GetManifestHash() [][]byte {
	if x != nil {
		return x.ManifestHash
	}
	return nil
}

func (x *Header) GetReceiptHash() []byte {
	if x != nil {
		return x.ReceiptHash
	}
	return nil
}

func (x *Header) GetDifficulty() []byte {
	if x != nil {
		return x.Difficulty
	}
	return nil
}

func (x *Header) GetParentEntropy() [][]byte {
	if x != nil {
		return x.ParentEntropy
	}
	return nil
}

func (x *Header) GetParentDeltaS() [][]byte {
	if x != nil {
		return x.ParentDeltaS
	}
	return nil
}

func (x *Header) GetNumber() [][]byte {
	if x != nil {
		return x.Number
	}
	return nil
}

func (x *Header) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

func (x *Header) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *Header) GetBaseFee() []byte {
	if x != nil {
		return x.BaseFee
	}
	return nil
}

func (x *Header) GetLocation() []byte {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Header) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Header) GetExtra() []byte {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *Header) GetMixHash() []byte {
	if x != nil {
		return x.MixHash
	}
	return nil
}

func (x *Header) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

var File_p2p_pb_header_proto protoreflect.FileDescriptor

var file_p2p_pb_header_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x32, 0x70, 0x2f, 0x70, 0x62, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x71, 0x75, 0x61, 0x69, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x22, 0xdc, 0x04, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x63, 0x6f, 0x69, 0x6e, 0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x74, 0x78, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x48, 0x61, 0x73, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x74, 0x78, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x69,
	0x66, 0x65, 0x73, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69,
	0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x6f, 0x70, 0x79,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x53,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x53, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x73, 0x55,
	0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x69, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x2d, 0x71, 0x75, 0x61, 0x69, 0x2f, 0x70, 0x32, 0x70,
	0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_p2p_pb_header_proto_rawDescOnce sync.Once
	file_p2p_pb_header_proto_rawDescData = file_p2p_pb_header_proto_rawDesc
)

func file_p2p_pb_header_proto_rawDescGZIP() []byte {
	file_p2p_pb_header_proto_rawDescOnce.Do(func() {
		file_p2p_pb_header_proto_rawDescData = protoimpl.X.CompressGZIP(file_p2p_pb_header_proto_rawDescData)
	})
	return file_p2p_pb_header_proto_rawDescData
}

var file_p2p_pb_header_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_p2p_pb_header_proto_goTypes = []interface{}{
	(*Header)(nil), // 0: quaiprotocol.Header
}
var file_p2p_pb_header_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_p2p_pb_header_proto_init() }
func file_p2p_pb_header_proto_init() {
	if File_p2p_pb_header_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_p2p_pb_header_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_p2p_pb_header_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_p2p_pb_header_proto_goTypes,
		DependencyIndexes: file_p2p_pb_header_proto_depIdxs,
		MessageInfos:      file_p2p_pb_header_proto_msgTypes,
	}.Build()
	File_p2p_pb_header_proto = out.File
	file_p2p_pb_header_proto_rawDesc = nil
	file_p2p_pb_header_proto_goTypes = nil
	file_p2p_pb_header_proto_depIdxs = nil
}
