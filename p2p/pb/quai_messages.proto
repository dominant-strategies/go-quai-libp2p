syntax = "proto3";

package quaiprotocol;
option go_package = "github.com/dominant-strategies/go-quai/p2p/pb";

import "common/proto_common.proto";
import "trie/proto_trienode.proto";
import "core/types/proto_block.proto";

// GossipSub messages for broadcasting blocks and transactions
message GossipBlock { block.ProtoBlock block = 1; }

message GossipTransaction { block.ProtoTransaction transaction = 1; }

// QuaiRequestMessage is the main 'envelope' for QuaiProtocol request messages
message QuaiRequestMessage {
    uint32 id = 1;
    common.ProtoLocation location = 2;
    oneof data {
        common.ProtoHash hash = 3;
        bytes number = 7;
    }
    oneof request {
        block.ProtoBlock block = 4;
        block.ProtoHeader header = 5;
        block.ProtoTransaction transaction = 6;
        common.ProtoHash blockHash = 8;
        trie.ProtoTrieNode trieNode = 9;
    }
}

// QuaiResponseMessage is the main 'envelope' for QuaiProtocol response messages
message QuaiResponseMessage {
    uint32 id = 1;
    common.ProtoLocation location = 2;
    oneof response {
        block.ProtoBlock block = 3;
        block.ProtoHeader header = 4;
        block.ProtoTransaction transaction = 5;
        common.ProtoHash blockHash = 6;
        trie.ProtoTrieNode trieNode = 7;
    }
}

message QuaiMessage {
    oneof payload {
        QuaiRequestMessage request = 1;
        QuaiResponseMessage response = 2;
    }
}